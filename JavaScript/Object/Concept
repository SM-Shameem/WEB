--------------------------------------------------------------------------------
DAY 01
--------------------------------------------------------------------------------
# object fundamental
1. real-life object, properties, and methods
2. object-definition, object-properties, and accessing properties
3. object-methods, accessing methods, and (this) keyword
4. do not declare (string | number | boolean) as object

# object definition
5. javascript object and primitives
6. objects are variable, object-properties, and object-methods
7. different ways of creating and declaring object
8. creating object/empty-object using (literal/new keyword)
9. objects are mutable

# class fundamental
10. javascript class and using a class
11. constructor and class method

# the (this) keyword
12. the (this) keyword used alone (default)
13. the (this) in a method (default/strict)
14. the (this) in a function (default/strict)
15. the (this) in a event-handler
16. the (this) in a explicit-function binding/object-method binding

--------------------------------------------------------------------------------
DAY 02
--------------------------------------------------------------------------------
# object properties
1. object properties and accessing properties
2. object properties and (for..in) loop
3. adding properties and deleting properties
4. nested object and nested array and object

# object methods
5. object method and accessing methods
6. using (this) keyword to access members inside methods
7. adding a method to an object and using built-in method

# object display
8. display object, display object-properties and using (for..in) loop
9. converting object to array using (Object.value()) method
10. converting object to string (JSON notation) using (Object.stringify()) method
11. stringify (array | date | function)

# object accessors
12. object accessors (getter and setter) and the (get and set) keyword
13. why use (getters and setters) and difference bettween (method and getters)
14. adding (getters and setters) to an existing object using (Object.defineProperty()) method

--------------------------------------------------------------------------------
DAY 03
--------------------------------------------------------------------------------

# object constructor
15. object constructor | the (this) keyword
16. adding a properties to an (object | constructor)
17. adding a methods to an (object | constructor)
18. built-in object constructor (boolean | number | string)

# object prototype
19. object prototype | prototype inheritance
20. using (prototype property)

# object iterable
21. iterabors | iterating over a (string | array)
22. home made iterable > object as argument | object as return

--------------------------------------------------------------------------------
DAY 04
--------------------------------------------------------------------------------

# class introduction
23. class syntax | using class
24. class constructor | clas methods

# class inheritance
25. class inheritance
26. getters and setters
27. hosting

# class (static) mode
28. static mode

--------------------------------------------------------------------------------
DAY 05
--------------------------------------------------------------------------------

# class Sets()

# class Maps()

# class references
// # property attributes | prototype property
// all (properties) have a (name). in addition they also have a (value)
// -> the (value) is one of the property's (attributes)
// -> other (attributes) are (enumerable | configurable | writable)
// -> these (attributes) define how the (property) can be accessed
// in javascript, all attributes can be read,
// -> but only the value attribute can be changed (and only if the property is writable)
// NB : ECMAScript5 has methods for both (getting and setting) all property attributes

// javascript objects inherit the properties of their prototype
// the (delete) keyword does not delete inherited properties,
// -> but if you delete a (prototype-proeprty), it will affect all (objects-inherited)

// Object.defineProperty() method
