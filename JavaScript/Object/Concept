--------------------------------------------------------------------------------
DAY 01
--------------------------------------------------------------------------------
# object fundamental
1. real-life object, properties, and methods
2. object-definition, object-properties, and accessing properties
3. object-methods, accessing methods, and (this) keyword
4. do not declare (string | number | boolean) as object

# object definition
5. javascript object and primitives
6. objects are variable, object-properties, and object-methods
7. different ways of creating and declaring object
8. creating object/empty-object using (literal/new keyword)
9. objects are mutable

# class fundamental
10. javascript class and using a class
11. constructor and class method

# the (this) keyword
12. the (this) keyword used alone (default)
13. the (this) in a method (default/strict)
14. the (this) in a function (default/strict)
15. the (this) in a event-handler
16. the (this) in a explicit-function binding/object-method binding

--------------------------------------------------------------------------------
DAY 02
--------------------------------------------------------------------------------
# object properties
1. object properties and accessing properties
2. object properties and (for..in) loop
3. adding properties and deleting properties
4. nested object and nested array and object

# object methods
5. object method and accessing methods
6. using (this) keyword to access members inside methods
7. adding a method to an object and using built-in method

# object display
8. display object, display object-properties and using (for..in) loop
9. converting object to array using (Object.value()) method
10. converting object to string (JSON notation) using (Object.stringify()) method
11. stringify (array | date | function)

# object accessors
12. object accessors (getter and setter) and the (get and set) keyword
13. why use (getters and setters) and difference bettween (method and getters)
14. adding (getters and setters) to an existing object using (Object.defineProperty()) method

--------------------------------------------------------------------------------
DAY 03
--------------------------------------------------------------------------------

# object constructor
15. object constructor | the (this) keyword
16. adding a properties to an (object | constructor)
17. adding a methods to an (object | constructor)
18. built-in object constructor (boolean | number | string)

# object prototype
19. object prototype | prototype inheritance
20. using (prototype property)

# object iterable
21. iterabors | iterating over a (string | array)
22. home made iterable (object as argument | object as return)
-> 23. javascript iterable (concept incomplete)


--------------------------------------------------------------------------------
DAY 04
--------------------------------------------------------------------------------

# class introduction
24. class syntax | using class
25. class constructor | clas methods

# class inheritance
26. class inheritance
27. multi-inheritance and chain-inheritance

# static, getters/setters, and hosting
28. static keyword (methods and properties)
-> 29. static-property and global-property with inheritance (syntax incomplete)
-> 30. getters and setters in class with inheritance and static/global (manipulate incomplete)
31. class hosting

--------------------------------------------------------------------------------
DAY 05
--------------------------------------------------------------------------------

# class Sets()
32. javascript sets | how to create a set | sets are objects
33. set methods & (add | forEach | values | key | entries)
34. size | has | delete | clear

# class Maps()
35. javascript Maps | how to create a map | maps are objects
36. map methods & (set | get | clear | has | size | delete)
37. forEach | keys | values | entries
38. javascript object vs maps | object as keys

# class references
39. ES5 object methods (managing objects)
40. ES5 object methods (protecting objects)
41. ES5 object methods (examples)

# MDN object references
42.
